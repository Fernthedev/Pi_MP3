import org.gradle.internal.os.OperatingSystem
import com.github.jengelman.gradle.plugins.shadow.transformers.Log4j2PluginsCacheFileTransformer

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.4.0'
    id "io.freefair.lombok" version "5.1.0"
    id "com.github.johnrengelman.shadow" version "6.0.0"
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'com.github.johnrengelman.shadow'


    group 'com.github.Fernthedev'
    version '0.1.0'

    ext.light_chat_ver = "4dc2677" //"1.6.0"
    ext.netty_ver = "4.1.48.Final"
    ext.jline_ver = "3.14.1"
    ext.log4j_ver = "2.13.1"
    ext.gdxVersion = '1.9.10'
    project.ext.lwjglVersion = "3.2.3"

    repositories {
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        mavenLocal()
    }



    switch (OperatingSystem.current()) {
        case OperatingSystem.LINUX:
            def osArch = System.getProperty("os.arch")
            project.ext.lwjglNatives = osArch.startsWith("arm") || osArch.startsWith("aarch64")
                    ? "natives-linux-${osArch.contains("64") || osArch.startsWith("armv8") ? "arm64" : "arm32"}"
                    : "natives-linux"
            break
        case OperatingSystem.MAC_OS:
            project.ext.lwjglNatives = "natives-macos"
            break
        case OperatingSystem.WINDOWS:
            project.ext.lwjglNatives = System.getProperty("os.arch").contains("64") ? "natives-windows" : "natives-windows-x86"
            break
    }

    dependencies {
        implementation 'com.github.Fernthedev:FernUtils:1.3.3'
        implementation 'com.github.Fernthedev:fern-configmanager:1.3.0'
        implementation 'com.google.inject:guice:4.2.3'

        implementation 'org.slf4j:slf4j-api:1.7.30'
        implementation 'commons-io:commons-io:2.6'


        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
//        testCompile group: 'junit', name: 'junit', version: '4.12'

        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    }

    test {
        useJUnitPlatform()

        // Always run tests, even when nothing changed.
//        dependsOn 'cleanTest'

        // Show test results.
        testLogging {
            events "passed", "skipped", "failed"
        }

        failFast = true
    }


    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    shadowJar {
        transform(Log4j2PluginsCacheFileTransformer)
        minimize() {
            exclude (dependency('io.netty:netty-transport.*:.*') )
            exclude (dependency('log4j:log4j:.*') )
            exclude (dependency('org.apache.logging.log4j:log4j-core:.*') )
            exclude (dependency('org.apache.logging.log4j:.*:.*') )
            exclude (dependency('org.slf4j:slf4j-api:.*') )
            exclude (dependency('commons-logging:.*:.*') )
//            exclude (dependency('com.pi4j:.*:.*') )
            exclude (dependency('org.fusesource.jansi:.*:.*') )
            exclude (dependency('org.jline:.*:.*') )
            exclude (dependency('net.minecrell:.*:.*') )
            exclude (dependency('com.lmax:disruptor:.*'))
            exclude ('.**/Log4j2Plugins.dat' )
        }
        mergeServiceFiles()
    }

    sourceSets {
        main.java.srcDirs += ['src/main/kotlin']
        main.kotlin.srcDirs += ['src/main/java']
    }


    jar.classifier('old')
    shadowJar.classifier('')
    build.dependsOn shadowJar
}

configure(subprojects.findAll {it.name != 'api'}) {
    apply plugin: 'application'

    run {
        workingDir = rootProject.projectDir
    }
}


configure(subprojects.findAll {it.name != 'core' && it.name != 'api'}) {
    dependencies {
        implementation ("com.squareup.okio:okio:2.4.3")
        annotationProcessor (project(':api')) {
            exclude group: 'com.squareup.okio', module: 'okio'
        }
        compileOnly project(':api')
        compileOnly project(':core')

    }
}

